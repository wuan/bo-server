#!/usr/bin/env python
# -*- coding: utf8 -*-

"""
Copyright (C) 2014 Andreas Würl

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

"""

import os
import logging
import time
import datetime
import pytz

from optparse import OptionParser
from lockfile.pidlockfile import PIDLockFile

from blitzortung import root_logger
import blitzortung.db
import blitzortung.clustering
import blitzortung.builder
import blitzortung.logger

logger = logging.getLogger(os.path.basename(__file__))
logger.parent = root_logger
root_logger.addHandler(blitzortung.logger.create_console_handler())


def detect_clusters(strikes_db, start_time, duration):
    end_time = start_time + duration
    time_interval = blitzortung.db.query.TimeInterval(start_time, end_time)
    strikes = strikes_db.select(time_interval)

    clustering = blitzortung.clustering.Clustering(blitzortung.builder.StrikeCluster())

    return clustering.build_clusters(strikes, time_interval)


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", help="verbose output")
    parser.add_option("-d", "--debug", dest="debug", action="store_true", help="debug output")
    parser.add_option("--startdate", dest="start_date", default=None, help="import start date")

    (options, args) = parser.parse_args()

    lock = PIDLockFile('/tmp/.bo-cluster.pid', timeout=10)

    with lock:
        if options.debug:
            root_logger.setLevel(logging.DEBUG)
        elif options.verbose:
            root_logger.setLevel(logging.INFO)

        strikes_db = blitzortung.db.strike()
        latest_stroke_time = strikes_db.get_latest_time()
        cluster_db = blitzortung.db.strike_cluster()
        latest_cluster_time = cluster_db.get_latest_time()

        if latest_cluster_time is None:
            if options.start_date is None:
                now = datetime.datetime.utcnow()
                now = now.replace(tzinfo=pytz.UTC)

                latest_cluster_time = now.replace(second=0, microsecond=0) - datetime.timedelta(minutes=240)
            else:
                latest_cluster_time = datetime.datetime.strptime(options.start_date, "%Y%m%d").replace(tzinfo=pytz.UTC)

            logger.info("start @ {}".format(latest_cluster_time))

        duration = datetime.timedelta(minutes=10)
        time_step = datetime.timedelta(minutes=1)

        cluster_group_size = 5000
        global_start_time = start_time = time.time()
        cluster_count = 0
        while True:
            if latest_cluster_time is not None:
                if latest_cluster_time + time_step > latest_stroke_time:
                    break

            latest_cluster_time += time_step

            for cluster in detect_clusters(strikes_db, latest_cluster_time - duration, duration):
                cluster_db.insert(cluster)

                cluster_count += 1
                if cluster_count % cluster_group_size == 0:
                    cluster_db.commit()
                    logger.info("commit #{} ({:.1f}/s) @{}".format(
                        cluster_count, cluster_group_size / (time.time() - start_time), cluster.get_timestamp()))
                    start_time = time.time()

        cluster_db.commit()

        logger.info("#{} clusters detected ({:.1f}/s)".format(
            cluster_count, cluster_count / (time.time() - global_start_time)))
