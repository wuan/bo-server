#!/usr/bin/env python
# -*- coding: utf8 -*-

import os
import logging
import datetime
from optparse import OptionParser
from lockfile.pidlockfile import PIDLockFile
import pytz
import logging
import time
import statsd

import blitzortung.dataimport
import blitzortung.db
import blitzortung.logger

logger = logging.getLogger(os.path.basename(__file__))
blitzortung.set_parent_logger(logger)
blitzortung.add_log_handler(blitzortung.logger.create_console_handler())

statsd_client = statsd.StatsClient('localhost', 8125, prefix='org.blitzortung.import')


def timestamp_is_newer_than(timestamp, latest_time):
    if not latest_time:
        return True
    return timestamp and timestamp > latest_time and timestamp - latest_time != datetime.timedelta()


def import_strikes_for(region, start_time):
    strike_db = blitzortung.db.strike()
    latest_time = strike_db.get_latest_time(region)
    if not latest_time:
        latest_time = start_time

    reference_time = time.time()
    strike_source = blitzortung.dataimport.strikes()
    strikes = strike_source.get_strikes_since(latest_time, region=region)
    query_time = time.time()

    strike_group_size = 10000
    strike_count = 0
    global_start_time = start_time = time.time()
    for strike in strikes:
        strike_db.insert(strike, region)

        strike_count += 1
        if strike_count % strike_group_size == 0:
            strike_db.commit()
            logger.info("commit #{}Â ({:.1f}/s) @{}".format(
                strike_count, strike_group_size / (time.time() - start_time), strike.timestamp))
            start_time = time.time()

    strike_db.commit()

    insert_time = time.time()
    stat_name = "strikes.%d" % region
    statsd_client.incr(stat_name)
    statsd_client.gauge(stat_name, strike_count)
    statsd_client.timing(stat_name + ".get", max(1, int((query_time - reference_time) * 1000)))
    statsd_client.timing(stat_name + ".insert", max(1, int((insert_time - query_time) * 1000)))

    logger.info("imported {} strikes ({:.1f}/s) for region {}".format(
        strike_count, strike_count / (time.time() - global_start_time), region))


def import_strikes(regions, start_time):
    # TODO add file based lock around import call

    for region in regions:
        import_strikes_for(region, start_time)


def import_station_info_for(region):
    # TODO add file based lock around import call

    imported_station_count = 0

    station_source = blitzortung.dataimport.stations()

    current_stations = station_source.get_stations(region=region)

    if current_stations:
        station_db = blitzortung.db.station()
        station_offline_db = blitzortung.db.station_offline()

        stations = station_db.select(region=region)
        stations_by_number = {}
        for station in stations:
            stations_by_number[station.number] = station

        stations_offline = station_offline_db.select(region=region)
        stations_offline_by_number = {}
        for station_offline in stations_offline:
            stations_offline_by_number[station_offline.number] = station_offline

        now = datetime.datetime.utcnow()
        offline_limit_time = now - datetime.timedelta(minutes=30)
        offline_limit_time = offline_limit_time.replace(tzinfo=pytz.UTC)

        for station in current_stations:
            if station.is_valid:
                imported_station_count += 1
                if station.number not in stations_by_number or \
                                                        station.number in stations_by_number and \
                                                        station.name == stations_by_number[
                                                    station.number].name and \
                                                station != stations_by_number[station.number] and \
                                timestamp_is_newer_than(station.timestamp,
                                                        stations_by_number[station.number].timestamp):
                    station_db.insert(station, region)

                if station.timestamp is None or station.timestamp >= offline_limit_time:
                    if station.number in stations_offline_by_number:
                        station_offline = stations_offline_by_number[station.number]
                        station_offline.end = station.timestamp
                        station_offline_db.update(station_offline, region)
                else:
                    if station.number not in stations_offline_by_number and station.timestamp.date().year > 2000:
                        station_offline = blitzortung.data.StationOffline(0, station.number,
                                                                          station.timestamp)
                        station_offline_db.insert(station_offline, region)
            else:
                logger.debug("INVALID: %s", station)

        station_db.commit()
        station_offline_db.commit()

    logger.info("imported %d stations for region %d" % (imported_station_count, region))


def import_station_info(regions):
    # TODO add file based lock around import call

    for region in regions:
        import_station_info_for(region)


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", help="verbose output")
    parser.add_option("-d", "--debug", dest="debug", action="store_true", help="debug output")
    parser.add_option("--startdate", dest="startdate", default=None, help="import start date")

    (options, args) = parser.parse_args()

    lock = PIDLockFile('/tmp/.bo-import.pid', timeout=10)

    with lock:
        if options.debug:
            blitzortung.set_log_level(logging.DEBUG)
        elif options.verbose:
            blitzortung.set_log_level(logging.INFO)
        start_time = datetime.datetime.strptime(options.startdate, "%Y%m%d").replace(
            tzinfo=pytz.UTC) if options.startdate else None

        regions = [1, 2, 3]
        import_strikes(regions, start_time)
        import_station_info(regions)
