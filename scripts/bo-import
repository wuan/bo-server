#!/usr/bin/env python
# -*- coding: utf8 -*-

import datetime
from optparse import OptionParser
from lockfile.pidlockfile import PIDLockFile
import pytz
import logging
import time

import blitzortung

logger = logging.getLogger(__name__)


def timestamp_is_newer_than(timestamp, latest_time):
    if not latest_time:
        return True
    return timestamp and timestamp > latest_time and timestamp - latest_time != datetime.timedelta()


def import_strokes_for(region, start_time):
    stroke_db = blitzortung.db.stroke()
    latest_time = stroke_db.get_latest_time(region)
    if not latest_time:
        latest_time = start_time

    stroke_source = blitzortung.dataimport.strokes()

    strokes = stroke_source.get_strokes_since(latest_time, region=region)

    for stroke in strokes:
        stroke_db.insert(stroke, region)

    stroke_db.commit()

    logger.info("imported %d strokes for region %d" % (len(strokes), region))


def import_strokes(regions, start_time):
    # TODO add file based lock around import call

    for region in regions:
        import_strokes_for(region, start_time)


def import_station_info_for(region):
    # TODO add file based lock around import call

    imported_station_count = 0

    station_source = blitzortung.dataimport.stations()

    current_stations = station_source.get_stations(region=region)

    if current_stations:
        station_db = blitzortung.db.station()
        station_offline_db = blitzortung.db.station_offline()

        stations = station_db.select(region=region)
        stations_by_number = {}
        for station in stations:
            stations_by_number[station.get_number()] = station

        stations_offline = station_offline_db.select(region=region)
        stations_offline_by_number = {}
        for station_offline in stations_offline:
            stations_offline_by_number[station_offline.get_number()] = station_offline

        now = datetime.datetime.utcnow()
        offline_limit_time = now - datetime.timedelta(minutes=30)
        offline_limit_time = offline_limit_time.replace(tzinfo=pytz.UTC)

        for station in current_stations:
            if station.is_valid():
                imported_station_count += 1
                if station.get_number() not in stations_by_number or \
                                                        station.get_number() in stations_by_number and \
                                                        station.get_name() == stations_by_number[
                                                    station.get_number()].get_name() and \
                                                station != stations_by_number[station.get_number()] and \
                                timestamp_is_newer_than(station.get_timestamp(),
                                                        stations_by_number[station.get_number()].get_timestamp()):
                    station_db.insert(station, region)

                if station.get_timestamp() is None or station.get_timestamp() >= offline_limit_time:
                    if station.get_number() in stations_offline_by_number:
                        station_offline = stations_offline_by_number[station.get_number()]
                        station_offline.set_end(station.get_timestamp())
                        station_offline_db.update(station_offline, region)
                else:
                    if station.get_number() not in stations_offline_by_number and station.get_timestamp().date().year > 2000:
                        station_offline = blitzortung.data.StationOffline(0, station.get_number(),
                                                                          station.get_timestamp())
                        station_offline_db.insert(station_offline, region)
            else:
                logger.debug("INVALID: %s", station)

        station_db.commit()
        station_offline_db.commit()

    logger.info("imported %d stations for region %d" % (imported_station_count, region))


def import_station_info(regions):
    # TODO add file based lock around import call

    for region in regions:
        import_station_info_for(region)


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", help="verbose output")
    parser.add_option("-d", "--debug", dest="debug", action="store_true", help="debug output")
    parser.add_option("--startdate", dest="startdate", default=None, help="import start date")

    (options, args) = parser.parse_args()

    lock = PIDLockFile('/tmp/.bo-import.pid', timeout=10)

    with lock:
        root_logger = logging.getLogger()
        log_handler = logging.StreamHandler()
        log_handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s: %(message)s"))
        root_logger.addHandler(log_handler)
        if options.verbose:
            root_logger.setLevel(logging.INFO)
        if options.debug:
            root_logger.setLevel(logging.DEBUG)
        start_time = datetime.datetime.strptime(options.startdate, "%Y%m%d").replace(tzinfo=pytz.UTC) if options.startdate else None

        regions = [1, 2, 3]
        import_strokes(regions, start_time)
        import_station_info(regions)
        time.sleep(10)
