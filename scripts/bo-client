#!/usr/bin/env python

from __future__ import print_function

import datetime
from optparse import OptionParser
import requests
import json
import time


def get_strikes(target_url, time_interval=60, show_results=False):
    next_index = 0

    session = requests.Session()

    #    while True:
    request = {
        'jsonrpc': 2.0,
        'method': 'get_strikes',
        'params': [time_interval, next_index],
        'id': 123
    }

    response = session.post(target_url, data=json.dumps(request)).json()

    if show_results and 'result' in response:
        result = response['result']

        strikes = result['s']
        reference_time = datetime.datetime.strptime(result['t'], "%Y%m%dT%H:%M:%S")

        for strike in strikes:
            print(reference_time - datetime.timedelta(seconds=strike[0]), strike[1], strike[2])

        if 'next' in result:
            next_index = result['next']


def get_strikes_grid(target_url, time_interval=60, grid_baselength=10000, minute_offset=1, region=1,
                     show_results=False):
    session = requests.Session()

    request = {
        'jsonrpc': 2.0,
        'method': 'get_strikes_grid',
        'params': [time_interval, grid_baselength, minute_offset, region],
        'id': 123
    }

    response = session.post(target_url, data=json.dumps(request))

    if show_results:
        json_response = response.json()
        if 'result' in json_response:
            result = json_response['result']

            if result:
                grid_data = result['r']
                reference_time = datetime.datetime.strptime(result['t'], '%Y%m%dT%H:%M:%S')

                for grid_element in grid_data:
                    print(grid_element[0], grid_element[1], grid_element[2],
                          reference_time + datetime.timedelta(seconds=grid_element[3]))

        else:
            print("no result!", json_response)
    else:
        print("received {} bytes".format(len(response.content)))


def check(target_url):
    request = {
        'jsonrpc': 2.0,
        'method': 'check'
    }

    response = requests.post(target_url, data=json.dumps(request)).json()

    print(response)


method_map = {
    'strikes_grid': get_strikes_grid,
    'strikes': get_strikes,
    'check': check
}

parser = OptionParser()

parser.add_option("-m", "--method-name", dest="method_name", help="selected method name", type='string',
                  default=method_map.keys()[0])

parser.add_option("-i", "--time-interval", dest="time_interval", type="int", default=None)
parser.add_option("-u", "--url", dest="url", type="string", default="http://bo-service.tryb.de")
parser.add_option("-s", "--show-results", dest="show_results", action="store_true", default=False)
parser.add_option("-t", "--show-timing", dest="show_timing", action="store_true", default=False)

(options, args) = parser.parse_args()

method = method_map[options.method_name]

option_keys = ['time_interval', 'show_results']
option_map = {}

for option_key in option_keys:
    if hasattr(options, option_key):
        value = getattr(options, option_key)
        if value is not None:
            option_map[option_key] = value

reference_time = time.time()
method(options.url, **option_map)
if options.show_timing:
    print(" %.03fs" % (time.time() - reference_time))
