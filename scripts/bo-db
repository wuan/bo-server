#!/usr/bin/env python

import sys
import datetime
import math

import pytz

from optparse import OptionParser, SUPPRESS_HELP

import shapely.geometry
import shapely.wkt

import blitzortung

DATE_FORMAT='%Y%m%d'
TIME_FORMAT='%H%M'
SECONDS_FORMAT='%S'

def parse_time(date_string, time_string, description):
  try:
    tmpdate = datetime.datetime.strptime(date_string, DATE_FORMAT).date()
    tmptime = datetime.datetime.strptime(time_string, TIME_FORMAT + ( SECONDS_FORMAT if len(time_string) > 4 else '')).time()
    return tz.localize(datetime.datetime.combine(tmpdate, tmptime), is_dst=True)
  except:
    print "parse error in %s" % description
    sys.exit(5)

def prepare_raster_if_applicable(options, area):
  if options.raster != None or options.xraster != None or options.yraster != None:

    if options.raster != None:
      rasterx = options.raster
      rastery = options.raster

    if options.xraster != None:
      rasterx = options.xraster
      if options.yraster == None and options.raster == None:
	rastery = rasterx

    if options.yraster != None:
      rastery = options.yraster
      if options.xraster == None and options.raster == None:
	rasterx = rastery

    if options.area == None:
      print "raster options requires declaration of envelope area"
      sys.exit(1)
    env = area.envelope.bounds
    return blitzortung.geom.Raster(env[0], env[2], env[1], env[3], rasterx, rastery, options.srid)

tz = pytz.timezone('UTC')
endtime = datetime.datetime.utcnow().replace(tzinfo=tz)
starttime = endtime - datetime.timedelta(hours=1)

parser = OptionParser()

parser.add_option("--startdate", dest="startdate", default="default",
                  help="start date for data retrieval", type="string")

parser.add_option("--starttime", dest="starttime", default="default",
                  help="start time for data retrieval", type="string")

parser.add_option("--enddate", dest="enddate", default="default",
                  help="end date for data retrieval", type="string")

parser.add_option("--endtime", dest="endtime", default="default",
                  help="end time for data retrieval", type="string")

parser.add_option("--area", dest="area",
                  help="area for which strokes are selected", type="string")

parser.add_option("--tz", dest="tz", default=str(tz),
                  help="used timezone", type="string")

parser.add_option("--useenv", dest="useenv", default=False, action="store_true",
                        help="use envelope of given area for query")

parser.add_option("--srid", dest="srid", default=blitzortung.geom.Geometry.DefaultSrid, 
                  help="srid for query area and results", type="int")

parser.add_option("--precision", dest="precision", default=4, 
                  help="precision of coordinates", type="int")

parser.add_option("--raster", dest="raster", 
                  help="raster width", type="float")

parser.add_option("--x-raster", dest="xraster", 
                  help="raster x width", type="float")

parser.add_option("--y-raster", dest="yraster", 
                  help="raster y width", type="float")

parser.add_option("--map", dest="map", action="store_true",
                  help="show ascii map instead of numerical raster")


(options, args) = parser.parse_args()

try:
  tz = pytz.timezone(options.tz)
except:
  print 'parse error in timezone "' + options.tz + '"'
  sys.exit(1)

starttime = starttime.astimezone(tz)
endtime = endtime.astimezone(tz)

if options.startdate == 'default':
  options.startdate = starttime.strftime(DATE_FORMAT)
if options.starttime == 'default':
  options.starttime = starttime.strftime(TIME_FORMAT)
if options.enddate == 'default':
  options.enddate = endtime.strftime(DATE_FORMAT)
if options.endtime == 'default':
  options.endtime = endtime.strftime(TIME_FORMAT)
  
starttime = parse_time(options.startdate, options.starttime, "starttime")
endtime = parse_time(options.enddate, options.endtime, "endtime")
  
area = None
if options.area:
  try:
    area = shapely.wkt.loads(options.area)
  except:
    print 'parse error in area "' + options.area + '"'
  
  if options.useenv:
    area = area.envelope

# open stroke database
strokedb = blitzortung.db.Stroke()

# set data parameters
strokedb.set_srid(options.srid)
strokedb.set_timezone(tz)

# set time range 
timeRange = blitzortung.db.TimeInterval(starttime, endtime)

# set query parameters
limit = blitzortung.db.Limit(5)
order = blitzortung.db.Order('timestamp')

raster = prepare_raster_if_applicable(options, area)

# start timer for database select
timer = blitzortung.util.Timer()

if raster:
  raster_result = strokedb.select_raster(raster, timeRange)

  selecttime = timer.lap()

  if options.map:
    print raster_result.to_map()
  else:
    print raster_result.to_arcgrid()

  sys.stderr.write('received raster data in %.3f seconds\n' %(selecttime))

else:
  strokes = strokedb.select(timeRange, area, order)

  selecttime = timer.lap()

  precisionfactor = math.pow(10.0, options.precision)

  for stroke in strokes:
    location_x = round(stroke.get_x() * precisionfactor) / precisionfactor
    location_y = round(stroke.get_y() * precisionfactor) / precisionfactor
    print str(stroke)

  sys.stderr.write('received %d strokes in %.3f seconds\n' %(len(strokes), selecttime))


