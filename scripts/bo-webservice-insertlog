#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import glob
import socket
import logging
from optparse import OptionParser
import datetime
import json

import GeoIP

from blitzortung_server.influxdb import DataPoint

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.INFO)


def is_valid_ip_address(ip_address_string):
    try:
        addr_bytes = socket.inet_aton(ip_address_string)
        if ip_address_string.count('.') == 3:
            return True
    except socket.error:
        pass
    return False


parser = OptionParser()

parser.add_option("--debug", dest="debug", default=False, action="store_true", help="enable debug output")

(options, args) = parser.parse_args()

if options.debug:
    logger.setLevel(logging.DEBUG)

geoip = GeoIP.open('/etc/alternatives/GeoIPCity.dat', GeoIP.GEOIP_STANDARD)

latest_time = None
logger.debug("latest time %s" % latest_time)

log_file_name = '/var/log/blitzortung/webservice.log'

json_file_names = glob.glob('/var/log/blitzortung/*.json')

json_file_names.sort()

for json_file_name in json_file_names:
    with open(json_file_name, 'r') as json_file:

        data = json.load(json_file)

        timestamp = datetime.datetime.fromtimestamp(data['timestamp'])

        if 'get_strikes_grid' in data:
            total_count = len(data['get_strikes_grid'])
            print(timestamp.strftime("%Y-%m-%d %H:%M:%S"), total_count)

            for entry in data['get_strikes_grid']:
                remote_address = entry[5]

                country_code = None
                version = None
                longitude = None
                latitude = None
                city = None
                if is_valid_ip_address(remote_address):
                    user_agent = entry[6]
                    version = None
                    if user_agent:
                        user_agent_parts = user_agent.split(' ')[0].rsplit('-', 1)
                        version_prefix = user_agent_parts[0]
                        version_string = user_agent_parts[1] if len(user_agent_parts) > 1 else None
                        if version_prefix == 'bo-android':
                            version = int(version_string)

                    geo_info = geoip.record_by_addr(remote_address)
                    longitude = round(geo_info['longitude'], 4)
                    latitude = round(geo_info['latitude'], 4)
                    city = geo_info['city']
                    country_code = geo_info['country_code'] if geo_info else None

                region = entry[3]
                minute_length = entry[0]
                grid_baselength = entry[1]
                minute_offset = entry[2]
                count_threshold = entry[4]

                tags = {
                    'region': region,
                    'grid_baselength': grid_baselength,
                    'minute_offset': minute_offset,
                    'minute_length': minute_length,
                    'count_threshold': count_threshold,
                    'country_code': country_code,
                    'version': version
                }

                fields = {
                    'longitude': longitude,
                    'latitude': latitude,
                    'city': city
                }

                data_point = DataPoint("servicelog", tags=tags, fields=fields)

                print(data_point.get())

    os.unlink(json_file_name)
