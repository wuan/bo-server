#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import glob
import socket
import logging
from optparse import OptionParser
import datetime
import json
import collections

import GeoIP
import blitzortung

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.INFO)


def is_valid_ip_address(ip_address_string):
    try:
        addr_bytes = socket.inet_aton(ip_address_string)
        if ip_address_string.count('.') == 3:
            return True
    except socket.error:
        pass
    return False


parser = OptionParser()

parser.add_option("--debug", dest="debug", default=False, action="store_true", help="enable debug output")

(options, args) = parser.parse_args()

if options.debug:
    logger.setLevel(logging.DEBUG)

geoip = GeoIP.open('/etc/alternatives/GeoIPCity.dat', GeoIP.GEOIP_STANDARD)

latest_time = None
logger.debug("latest time %s" % latest_time)

log_file_name = '/var/log/blitzortung/webservice.log'

json_file_names = glob.glob('/var/log/blitzortung/*.json')

json_file_names.sort()

servicelog_total = blitzortung.db.servicelog_total()
servicelog_version = blitzortung.db.servicelog_version()
servicelog_country = blitzortung.db.servicelog_country()
servicelog_parameters = blitzortung.db.servicelog_parameters()

for json_file_name in json_file_names:
    with open(json_file_name, 'r') as json_file:

        data = json.load(json_file)

        timestamp = datetime.datetime.fromtimestamp(data['timestamp'])

        total_count = len(data['get_strikes_grid'])
        print(timestamp.strftime("%Y-%m-%d %H:%M:%S"), total_count)

        versions = collections.defaultdict(int)
        countries = collections.defaultdict(int)
        parameters = collections.defaultdict(int)

        for entry in data['get_strikes_grid']:
            remote_address = entry[5]

            if is_valid_ip_address(remote_address):
                user_agent = entry[6]
                version = None
                version_prefix = 'bo-android-'
                if user_agent and user_agent.startswith(version_prefix):
                    version = int(user_agent[len(version_prefix):].split(' ')[0])
                versions[version] += 1

                geo_info = geoip.record_by_addr(remote_address)
                country_code = geo_info['country_code'] if geo_info else None
                countries[country_code] += 1

            region = entry[3]
            minute_length = entry[0]
            grid_baselength = entry[1]
            minute_offset = entry[2]
            count_threshold = entry[4]

            key = (region, minute_length, minute_offset, grid_baselength, count_threshold)
            parameters[key] += 1

        servicelog_total.insert(timestamp, total_count)

        for version, version_count in versions.items():
            servicelog_version.insert(timestamp, version, version_count)
        for country, country_count in countries.items():
            servicelog_country.insert(timestamp, country, country_count)
        for parameters, parameters_count in parameters.items():
            servicelog_parameters.insert(*parameters)

    os.unlink(json_file_name)

servicelog_total.commit()
servicelog_version.commit()
servicelog_country.commit()
