#!/usr/bin/env python

import glob
import socket
import GeoIP

import operator

import blitzortung

class ServiceLog(blitzortung.db.Base):

  def __init__(self):
    super(ServiceLog, self).__init__()

    self.set_table_name('servicelog')

  def insert(self, timestamp, ip_address, city_name, country_name, longitude, latitude):
    sql = 'INSERT INTO ' + self.get_full_table_name() + ' ' + \
	  '("timestamp", geog, address, city, country)' + \
	  'VALUES (%(timestamp)s, ST_MakePoint(%(longitude)s, %(latitude)s), %(ip_address)s, %(city_name)s, %(country_name)s);'

    parameters = {
    	'timestamp': timestamp,
	'ip_address': ip_address,
        'longitude': longitude,
        'latitude': latitude,
        'city_name': city_name,
        'country_name': country_name
    }
 
    self.execute(sql, parameters)

  def select(self):
    pass
     


def is_valid_ip_address(ip_address_string):
  try:
    addr_bytes = socket.inet_aton(ip_address_string)
    if ip_address_string.count('.') == 3:
      return True
  except socket.error:
    pass
  return False

def lookup(addr):
  try:
    return socket.gethostbyaddr(addr)[0]
  except socket.herror:
    return addr


count_by_address = {}

geoip = GeoIP.open('/etc/alternatives/GeoIPCity.dat', GeoIP.GEOIP_STANDARD)

servicelog = ServiceLog()
for log_file_name in glob.glob('/var/log/blitzortung/webservice.log*'):
  with open(log_file_name, 'r') as log_file:

    for line in log_file:
      fields = line.split(' ')

      if len(fields) >= 3:
        remote_address = fields[3]
        if is_valid_ip_address(remote_address):
	  date = fields[0]
	  time = fields[1]

	  geo_info = geoip.record_by_addr(remote_address)
	  if geo_info:
	    city_name = geo_info['city']
	    if city_name:
	      city_name = city_name.decode('latin_1')
	    longitude = "%.4f" % geo_info['longitude']
	    latitude = "%.4f" % geo_info['latitude']

	    country_name = geo_info['country_name']
	  else:
	    city_name = None
	    country_name = None
	    longitude = None
	    latitude = None
	  servicelog.insert(date + ' ' + time, remote_address, city_name, country_name, longitude, latitude)

	  count = count_by_address.get(remote_address, 0)
	  count += 1
	  count_by_address[remote_address] = count
	
servicelog.commit()

countries = {}
cities_by_country = {}

index = 1
total_count = 0
  
for remote_address, count in sorted(count_by_address.iteritems(), key=lambda (k,v): (v,k)):
  geo_info = geoip.record_by_addr(remote_address)
  if geo_info:
    city_name = geo_info['city']
    if city_name:
      city_name = city_name.decode('latin_1')
    longitude = "%.4f" % geo_info['longitude']
    latitude = "%.4f" % geo_info['latitude']

    country_name = geo_info['country_name']
  else:
    city_name = ''
    country_name = ''
    longitude = ''
    latitude = ''
  print "%4d %5d %s, %s, %s, %s" %(index, count, city_name, country_name, longitude, latitude)

  country_count = countries.get(country_name, 0)
  country_count += count
  countries[country_name] = country_count

  total_count += count
  index += 1

print ""
print "total:", total_count

countries_sorted = sorted(countries.iteritems(), key=operator.itemgetter(1))
for country in countries_sorted:
  print country
